# Generated by Django 2.2.10 on 2020-04-13 23:03

from django.db import migrations, models


def forwards(apps, schema_editor):
    Rule = apps.get_model('seed', 'Rule')

    # Total 1217 rows/rules;
    # Min is null and max is null (377):
        # data_type == 1 (176):
            # text_match is not null and text_match != '' (68):
                # include
    Rule.objects.filter(min=None, max=None, data_type=1).exclude(text_match=None).update(condition='include')
            # else (108):
                # ?
    Rule.objects.filter(min=None, max=None, data_type=1, text_match=None).update(condition='')
        # elif data_type != 1 (32):
            # required is true, not_null is true (17) -> not_null;
    Rule.objects.filter(min=None, max=None).exclude(data_type=1).filter(required=True, not_null=True).update(condition='not_null')
            # required is true, not_null is false (2) -> required;
    Rule.objects.filter(min=None, max=None).exclude(data_type=1).filter(required=True, not_null=False).update(condition='required')
            # required is false, not_null is true (13) -> not_null;
    Rule.objects.filter(min=None, max=None).exclude(data_type=1).filter(required=False, not_null=True).update(condition='not_null')
            # required is false, not_null is false (0) -> ?;
    Rule.objects.filter(min=None, max=None).exclude(data_type=1).filter(required=False, not_null=False).update(condition='')
        # else (data_type is null) (169)
            # required is true, not_null is true (0) -> not_null;
    Rule.objects.filter(min=None, max=None, data_type=None, required=True, not_null=True).update(condition='not_null')
            # required is true, not_null is false (0) -> required;
    Rule.objects.filter(min=None, max=None, data_type=None, required=True, not_null=False).update(condition='required')
            # required is false, not_null is true (167) -> not_null;
    Rule.objects.filter(min=None, max=None, data_type=None, required=False, not_null=True).update(condition='not_null')
            # required is false, not_null is false (2) -> ?;
    Rule.objects.filter(min=None, max=None, data_type=None, required=False, not_null=False).update(condition='')
    # min is null and max is not null (38);
    # min is not null and max is null (204);
    # min is not null and max is not null (598):
    Rule.objects.exclude(min=None, max=None).update(condition='range')
        # range


class Migration(migrations.Migration):

    dependencies = [
        ('seed', '0124_auto_20200323_1509'),
    ]

    operations = [
        migrations.AddField(
            model_name='rule',
            name='condition',
            field=models.CharField(blank=True, default='', max_length=200),
        ),

        migrations.RunPython(forwards),
    ]
